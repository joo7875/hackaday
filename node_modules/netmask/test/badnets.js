(function() {
  var Netmask, assert, isError, shouldFailWithError, vows;

  vows = require('vows');

  assert = require('assert');

  Netmask = require('../lib/netmask').Netmask;

  shouldFailWithError = function(msg) {
    var context, obj;
    context = (
      obj = {
        topic: function() {
        var e;
        try {
          return new Netmask(this.context.name);
        } catch (error) {
          e = error;
          return e;
        }
      },
        'should fail': function(e) {
        return assert.ok(isError(e), "is an Error object " + e);
      }
      },
      obj["with error `" + msg + "'"] = function(e) {
        var ref;
        return assert.ok(((ref = e.message) != null ? ref.toLowerCase().indexOf(msg.toLowerCase()) : void 0) > -1, "'" + e.message + "' =~ " + msg);
      },
      obj
    );
    return context;
  };

  isError = function(e) {
    return typeof e === 'object' && Object.prototype.toString.call(e) === '[object Error]';
  };

  vows.describe('IPs with bytes greater than 255').addBatch({
    '209.256.68.22/255.255.224.0': shouldFailWithError('Invalid net'),
    '209.180.68.22/256.255.224.0': shouldFailWithError('Invalid mask'),
    '209.500.70.33/19': shouldFailWithError('Invalid net'),
    '140.999.82': shouldFailWithError('Invalid net'),
    '899.174': shouldFailWithError('Invalid net'),
    '900': shouldFailWithError('Invalid net'),
    '209.157.300/19': shouldFailWithError('Invalid net'),
    '209.300.64.0.10': shouldFailWithError('Invalid net'),
    'garbage': shouldFailWithError('Invalid net')
  })["export"](module);

  vows.describe('Ranges that are a power-of-two big, but are not legal blocks').addBatch({
    '218.0.0.0/221.255.255.255': shouldFailWithError('Invalid mask'),
    '218.0.0.4/218.0.0.11': shouldFailWithError('Invalid mask')
  })["export"](module);

}).call(this);
