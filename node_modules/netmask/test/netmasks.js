(function() {
  var Netmask, assert, contexts, fixtures, util, vows;

  vows = require('vows');

  assert = require('assert');

  util = require('util');

  Netmask = require('../lib/netmask').Netmask;

  fixtures = [['209.157.68.22/255.255.224.0', null, '209.157.64.0', '255.255.224.0', 19], ['209.157.68.22', '255.255.224.0', '209.157.64.0', '255.255.224.0', 19], ['209.157.70.33/19', null, '209.157.64.0', '255.255.224.0', 19], ['209.157.70.33', null, '209.157.70.33', '255.255.255.255', 32], ['140.174.82', null, '140.174.82.0', '255.255.255.0', 24], ['140.174', null, '140.174.0.0', '255.255.0.0', 16], ['10', null, '10.0.0.0', '255.0.0.0', 8], ['10/8', null, '10.0.0.0', '255.0.0.0', 8], ['209.157.64/19', null, '209.157.64.0', '255.255.224.0', 19], ['216.140.48.16/32', null, '216.140.48.16', '255.255.255.255', 32], ['209.157/17', null, '209.157.0.0', '255.255.128.0', 17], ['0.0.0.0/0', null, '0.0.0.0', '0.0.0.0', 0]];

  contexts = [];

  fixtures.forEach(function(fixture) {
    var addr, base, bitmask, context, mask, newmask;
    addr = fixture[0], mask = fixture[1], base = fixture[2], newmask = fixture[3], bitmask = fixture[4];
    context = {
      topic: function() {
        return new Netmask(addr, mask);
      }
    };
    context["base is `" + base + "'"] = function(block) {
      return assert.equal(block.base, base);
    };
    context["mask is `" + newmask + "'"] = function(block) {
      return assert.equal(block.mask, newmask);
    };
    context["bitmask is `" + bitmask + "'"] = function(block) {
      return assert.equal(block.bitmask, bitmask);
    };
    context["toString is `" + base + "/`" + bitmask + "'"] = function(block) {
      return assert.equal(block.toString(), block.base + "/" + block.bitmask);
    };
    return contexts[("for " + addr) + (mask ? " with " + mask : '')] = context;
  });

  vows.describe('Netmaks parsing').addBatch(contexts)["export"](module);

  vows.describe('Netmask contains IP').addBatch({
    'block 192.168.1.0/24': {
      topic: function() {
        return new Netmask('192.168.1.0/24');
      },
      'contains IP 192.168.1.0': function(block) {
        return assert.ok(block.contains('192.168.1.0'));
      },
      'contains IP 192.168.1.255': function(block) {
        return assert.ok(block.contains('192.168.1.255'));
      },
      'contains IP 192.168.1.63': function(block) {
        return assert.ok(block.contains('192.168.1.63'));
      },
      'does not contain IP 192.168.0.255': function(block) {
        return assert.ok(!block.contains('192.168.0.255'));
      },
      'does not contain IP 192.168.2.0': function(block) {
        return assert.ok(!block.contains('192.168.2.0'));
      },
      'does not contain IP 10.168.2.0': function(block) {
        return assert.ok(!block.contains('10.168.2.0'));
      },
      'does not contain IP 209.168.2.0': function(block) {
        return assert.ok(!block.contains('209.168.2.0'));
      },
      'contains block 192.168.1.0/24': function(block) {
        return assert.ok(block.contains('192.168.1.0/24'));
      },
      'contains block 192.168.1': function(block) {
        return assert.ok(block.contains('192.168.1'));
      },
      'contains block 192.168.1.128/25': function(block) {
        return assert.ok(block.contains('192.168.1.128/25'));
      },
      'does not contain block 192.168.1.0/23': function(block) {
        return assert.ok(!block.contains('192.168.1.0/23'));
      },
      'does not contain block 192.168.2.0/24': function(block) {
        return assert.ok(!block.contains('192.168.2.0/24'));
      },
      'toString equals 192.168.1.0/24': function(block) {
        return assert.equal(block.toString(), '192.168.1.0/24');
      }
    },
    'block 192.168.0.0/24': {
      topic: function() {
        return new Netmask('192.168.0.0/24');
      },
      'does not contain block 192.168': function(block) {
        return assert.ok(!block.contains('192.168'));
      }
    }
  })["export"](module);

  vows.describe('Netmask forEach').addBatch({
    'block 192.168.1.0/24': {
      topic: function() {
        return new Netmask('192.168.1.0/24');
      },
      'should loop through all ip addresses': function(block) {
        var called;
        called = 0;
        block.forEach(function(ip, long, index) {
          return called = index;
        });
        return assert.equal(called + 1, 254);
      }
    },
    'block 192.168.1.0/23': {
      topic: function() {
        return new Netmask('192.168.1.0/23');
      },
      'should loop through all ip addresses': function(block) {
        var called;
        called = 0;
        block.forEach(function(ip, long, index) {
          return called = index;
        });
        return assert.equal(called + 1, 510);
      }
    }
  })["export"](module);

}).call(this);
